name: "main-ci"

on:
  push:
    branches:
      - 'main'

jobs:
  doxygen:
    runs-on: ubuntu-20.04
    if: "contains(github.event.head_commit.message, '--build-docs')"
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      run: sudo apt install doxygen graphviz
    - name: generate docs
      run: doxygen
    - name: Deploy
      uses: s0/git-publish-subdir-action@master
      env:
        REPO: self
        BRANCH: gh-pages
        FOLDER: doc/html
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_matrix:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04", "macos-latest", "windows-latest"]
        buildType: ["static", "shared"]
        pipBefore: [true, false]
        useMsys: [true, false]
        exclude:
          - useMsys: true
            os: "ubuntu-20.04"
          - useMsys: true
            os: "ubuntu-22.04"
          - useMsys: true
            os: "macos-latest"
        include:
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-20.04"
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-22.04"
          - script_file: "source ./.venv/bin/activate"
            os: "macos-latest"
          - script_file: "source ./.venv/bin/activate"
            os: "windows-latest"
            useMsys: true
          - script_file: ".venv/Scripts/activate.ps1"
            os: "windows-latest"
            useMsys: false
          - setupExtras: "-Db_lto=false -Dgtest:b_lto=false"
            os: "windows-latest"
            
    name: ${{ matrix.os }} ${{ matrix.buildType }} pipBefore ${{ matrix.pipBefore }} msys ${{ matrix.useMsys }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-python@v3
        if: ${{ !matrix.useMsys }}
      - name: default - setup venv
        if: ${{ !matrix.useMsys }}
        run: python3 -m venv .venv
      - name: default - install meson and ninja
        if: ${{ !matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            pip install meson ninja
      - name: default - Prepare MSVC
        if: ${{ !matrix.useMsys && matrix.os == 'windows-latest' }}
        uses: bus1/cabuild/action/msdevshell@v1
        with:
            architecture: x64
      - name: default - install pip deps
        if: ${{ matrix.pipBefore && !matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            pip install -r requirements.txt
      - name: default - setup the project
        if: ${{ !matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} -Dno_pip_install=${{ matrix.pipBefore }} build
      - name: default - compile the project
        if: ${{ !matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            meson compile -C build
      - name: default - test the project
        if: ${{ !matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            meson test --verbose -C build
    
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.useMsys }}
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkg-config
      - name: msys2 - setup venv
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: python3 -m venv .venv
      - name: msys2 - install pip deps
        shell: msys2 {0}
        if: ${{ matrix.pipBefore && matrix.useMsys }}
        run: |
            ${{ matrix.script_file }}
            pip install -r requirements.txt
      - name: msys2 - setup the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: |
            ${{ matrix.script_file }}
            meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} -Dno_pip_install=${{ matrix.pipBefore }} build
      - name: msys2 - compile the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: |
            ${{ matrix.script_file }}
            meson compile -C build
      - name: msys2 - test the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: |
            ${{ matrix.script_file }}
            meson test --verbose -C build
            
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.buildType }}-pipBefore-${{ matrix.pipBefore }}-msys-${{ matrix.useMsys }}
          path: build

  pre-release:
    name: "Pre Release latest"
    runs-on: "ubuntu-20.04"
    needs: build_matrix
    steps:
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE

