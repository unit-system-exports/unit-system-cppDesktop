name: create release

on:
  push:
    tags:
      - 'v*'

jobs:
  meson_cpp17_matrix:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04", "macos-latest", "windows-latest"]
        buildType: ["static", "shared"]
        useMsys: [true, false]
        exclude:
          - useMsys: true
            os: "ubuntu-20.04"
          - useMsys: true
            os: "ubuntu-22.04"
          - useMsys: true
            os: "macos-latest"
        include:
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-20.04"
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-22.04"
          - script_file: "source ./.venv/bin/activate"
            os: "macos-latest"
          - script_file: ".venv/Scripts/activate.ps1"
            os: "windows-latest"
          - setupExtras: "-Db_lto=false -Dgtest:b_lto=false"
            os: "windows-latest"
            
    name: ${{ matrix.os }} ${{ matrix.buildType }} msys ${{ matrix.useMsys }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: default - Prepare MSVC
        if: ${{ !matrix.useMsys && matrix.os == 'windows-latest' }}
        uses: bus1/cabuild/action/msdevshell@v1
        with:
            architecture: x64
      - name: default - install meson and ninja
        if: ${{ !matrix.useMsys }}
        run: | 
            pipx install meson
            pipx install ninja
      - name: default - setup the project
        if: ${{ !matrix.useMsys }}
        run: meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} build
      - name: default - compile the project
        if: ${{ !matrix.useMsys }}
        run: meson compile -C build
      - name: default - test the project
        if: ${{ !matrix.useMsys }}
        run: meson test --verbose -C build
    
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.useMsys }}
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkg-config
      - name: msys2 - setup the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} build
      - name: msys2 - compile the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: meson compile -C build
      - name: msys2 - test the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: meson test --verbose -C build
            
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.buildType }}-msys-${{ matrix.useMsys }}
          path: build

  release:
    name: "Release candidate"
    runs-on: "ubuntu-20.04"
    needs: [meson_cpp17_matrix]
    steps:
      - uses: actions/checkout@v3
      - name: "release"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.CI_GITHUB_TOKEN }}"
          prerelease: ${{ contains(github.ref_name, '-rc') }}
      - name: "update wrapdb"
        if: ${{ !contains(github.ref_name, '-rc') }}
        uses: "noah1510/update-wrapdb-action@latest"
        with:
          source-repository: "https://github.com/noah1510/unit-system"
          release-tag: ${{ github.ref }}
          provides: "unit-system = unit_system_dep"
          push-repository: "https://github.com/noah1510/wrapdb"
          github_token: ${{ secrets.CI_GITHUB_TOKEN }}
