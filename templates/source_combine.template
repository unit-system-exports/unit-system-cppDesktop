#include "unit_system_combinations.hpp"
{% for combination in combinations %}
sakurajin::unit_system::{{ combination[2] }} sakurajin::unit_system::operator*(const sakurajin::unit_system::{{ combination[0] }}& v1, const sakurajin::unit_system::{{ combination[1] }}& v2){
    {{ combination[0] }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination[1] }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination[2] }}{_v1.value*_v2.value,_v1.multiplier*_v2.multiplier};
}

sakurajin::unit_system::{{ combination[1] }} sakurajin::unit_system::operator/(const sakurajin::unit_system::{{ combination[2] }}& v1, const sakurajin::unit_system::{{ combination[0] }}& v2){
    {{ combination[2] }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination[0] }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination[1] }}{_v1.value/_v2.value,_v1.multiplier/_v2.multiplier};
}

{% if combination[0] != combination[1] %}
sakurajin::unit_system::{{ combination[2] }} sakurajin::unit_system::operator*(const sakurajin::unit_system::{{ combination[1] }}& v1, const sakurajin::unit_system::{{ combination[0] }}& v2){
    {{ combination[1] }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination[0] }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination[2] }}{_v1.value*_v2.value,_v1.multiplier*_v2.multiplier};
}

sakurajin::unit_system::{{ combination[0] }} sakurajin::unit_system::operator/(const sakurajin::unit_system::{{ combination[2] }}& v1, const sakurajin::unit_system::{{ combination[1] }}& v2){
    {{ combination[2] }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination[1] }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination[0] }}{_v1.value/_v2.value,_v1.multiplier/_v2.multiplier};
}
{% else %}
sakurajin::unit_system::{{ combination[2] }} sakurajin::unit_system::square(const sakurajin::unit_system::{{ combination[0] }}& v1){
    return v1*v1;
}
{% endif %}
{% endfor %}
