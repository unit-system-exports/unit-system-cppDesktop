#pragma once

#include "unit_system_unit_t.hpp"

{% if export_macro %}
#ifndef {{ export_macro }}
    #define {{ export_macro }}
#endif
{% endif %}

#ifndef UNIT_SYSTEM_NO_STD
#include <iostream>
#endif

namespace sakurajin{
    namespace unit_system{
        class {{ export_macro }}{{ unit_name }} : public unit_t<{{ unit_id }}>{
        public:
            {{ unit_name }}();
            {{ unit_name }}(unit_t<{{ unit_id }}> val);
            explicit {{ unit_name }}(long double val);
            {{ unit_name }}(long double val, long double mult);
            {{ unit_name }}(long double val, long double mult, long double offset);
        };
        {% if create_literals %}

        #ifndef UNIT_SYSTEM_NO_STD
        {{ export_macro }}std::ostream& operator<<(std::ostream& os, const {{ unit_name }}& t);
        #endif

        inline namespace literals{
            {% for literal in literals %}
            {{ export_macro }}{{ unit_name }} operator "" _{{ literal.name }}(long double val);
            {{ export_macro }}{{ unit_name }} operator "" _{{ literal.name }}(unsigned long long int val);
            {% endfor %}
        }
        {% endif %}
    }
}
